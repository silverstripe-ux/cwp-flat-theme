// Mixins.less
// Snippets of reusable CSS to develop faster and keep code readable
// -----------------------------------------------------------------

// Updates for SASS:
//  - use @mixin instead of class definitions
//  - replace @ with $
//  - add default of 5px for @size and @square mixins
//  - replace grid generation loops with for $i from 1 to $gridColumns
//  - explicitly provide .clearfix, .hide-text and .input-block-level
//    (line 304) for compatibility with LESS output
//  - replace fadein with fade-in
//  - pass grid-* mixin arguments to generators, because otherwise the
//    generator mixins will use the default variables

// UTILITY MIXINS
// --------------------------------------------------

.clearfix {
  @include clearfix();
}

// IE7 inline-block
// ----------------
@mixin ie7-inline-block() {
  *display: inline; // IE7 inline-block hack
  *zoom: 1;
}

// IE7 likes to collapse whitespace on either side of the inline-block elements.
// Ems because we're attempting to match the width of a space character. Left
// version is for form buttons, which typically come after other elements, and
// right version is for icons, which come before. Applying both is ok, but it will
// mean that space between those elements will be .6em (~2 space characters) in IE7,
// instead of the 1 space in other browsers.
@mixin ie7-restore-left-whitespace() {
  *margin-left: .3em;

  &:first-child {
    *margin-left: 0;
  }
}

@mixin ie7-restore-right-whitespace() {
  *margin-right: .3em;

  &:last-child {
    *margin-left: 0;
  }
}

.hide-text {
  @include hide-text();
}

// FONTS
// --------------------------------------------------

@mixin font-family-serif {
  font-family: $serifFontFamily;
}

@mixin font-family-sans-serif {
  font-family: $sansFontFamily;
}

@mixin font-family-monospace {
  font-family: $monoFontFamily;
}

@mixin font-shorthand ($size: $font-size-base, $weight: normal, $lineHeight: $line-height-base) {
  font-size: $size;
  font-weight: $weight;
  line-height: $lineHeight;
}

@mixin font-serif($size: $font-size-base, $weight: normal, $lineHeight: $line-height-base) {
  @include font-family-serif();
  @include font-shorthand($size, $weight, $lineHeight);
}
@mixin font-sans-serif($size: $font-size-base, $weight: normal, $lineHeight: $line-height-base) {
  @include font-family-sans-serif();
  @include font-shorthand($size, $weight, $lineHeight);
}
@mixin font-monospace($size: $font-size-base, $weight: normal, $lineHeight: $line-height-base) {
  @include font-family-monospace();
  @include font-shorthand($size, $weight, $lineHeight);
}


// FORMS
// --------------------------------------------------

// Block level inputs
@mixin input-block-level {
  display: block;
  width: 100%;
  min-height: 28px;        // Make inputs at least the height of their button counterpart
  @include box-sizing(border-box); // Makes inputs behave like true block-level elements
}


// Mixin for form field states
@mixin formFieldState($textColor: #555, $borderColor: #ccc, $backgroundColor: #f5f5f5) {
  // Set the text color
  > label,
  .help-block,
  .help-inline {
    color: $textColor;
  }
  // Style inputs accordingly
  input,
  select,
  textarea {
    color: $textColor;
    border-color: $borderColor;
    &:focus {
      border-color: darken($borderColor, 10%);
      @include box-shadow(0 0 6px lighten($borderColor, 20%));
    }
  }
  // Give a small background color for input-prepend/-append
  .input-prepend .add-on,
  .input-append .add-on {
    color: $textColor;
    background-color: $backgroundColor;
    border-color: $textColor;
  }
}

// Background clipping
// Heads up: FF 3.6 and under need "padding" instead of "padding-box"
@mixin background-clip($clip) {
  -webkit-background-clip: $clip;
     -moz-background-clip: $clip;
          background-clip: $clip;
}

// Background sizing
@mixin background-size($size) {
  -webkit-background-size: $size;
     -moz-background-size: $size;
       -o-background-size: $size;
          background-size: $size;
}

// Uses box-sizing mixin, so must be defined here
.input-block-level {
  @include input-block-level();
}

// CSS3
// --------------------------------------------------

// Border Radius
@mixin border-radius($radius: 5px) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
          border-radius: $radius;
}

// BACKGROUNDS
// --------------------------------------------------

// Add an alphatransparency value to any background or border color (via Elyse Holladay)
@mixin translucent-background($color: $white, $alpha: 1) {
  background-color: hsla(hue($color), saturation($color), lightness($color), $alpha);
}

@mixin translucent-border($color: $white, $alpha: 1) {
  border-color: hsla(hue($color), saturation($color), lightness($color), $alpha);
  @include background-clip(padding-box);
}

// Gradient Bar Colors for buttons and alerts
@mixin gradientBar($primaryColor, $secondaryColor) {
  @include gradient-vertical($primaryColor, $secondaryColor);
  border-color: $secondaryColor $secondaryColor darken($secondaryColor, 15%);
  border-color: rgba(0,0,0,.1) rgba(0,0,0,.1) fade-in(rgba(0,0,0,.1), 0.15);
}

// COMPONENT MIXINS
// --------------------------------------------------

// Horizontal dividers
// -------------------------
// Dividers (basically an hr) within dropdowns and nav lists
@mixin nav-divider-line {
  // IE7 needs a set width since we gave a height. Restricting just
  // to IE7 to keep the 1px left/right space in other browsers.
  // It is unclear where IE is getting the extra space that we need
  // to negative-margin away, but so it goes.
  *width: 100%;
  height: 1px;
  margin: (($line-height-base / 2) - 1) 1px; // 8px 1px
  *margin: -5px 0 5px;
  overflow: hidden;
  background-color: #e5e5e5;
  border-bottom: 1px solid $white;
}

// Button backgrounds
// ------------------
@mixin buttonBackground($start-color, $end-color) {
  // gradientBar will set the background to a pleasing blend of these, to support IE<=9
  @include gradientBar($start-color, $end-color);
  *background-color: $end-color; /* Darken IE7 buttons by default so they stand out more given they won't have borders */
  @include reset-filter();

  // in these cases the gradient won't cover the background, so we override
  &:hover, &:active, &.active, &.disabled, &[disabled] {
    background-color: $end-color;
    *background-color: darken($end-color, 5%);
  }

  // IE 7 + 8 can't handle box-shadow to show active, so we darken a bit ourselves
  &:active,
  &.active {
    background-color: darken($end-color, 10%) \9;
  }
}

// Popover arrows
// -------------------------
// For tipsies and popovers
@mixin popoverArrow-top($arrowWidth: 5px, $color: $black) {
  bottom: 0;
  left: 50%;
  margin-left: -$arrowWidth;
  border-left: $arrowWidth solid transparent;
  border-right: $arrowWidth solid transparent;
  border-top: $arrowWidth solid $color;
}
@mixin popoverArrow-left($arrowWidth: 5px, $color: $black) {
  top: 50%;
  right: 0;
  margin-top: -$arrowWidth;
  border-top: $arrowWidth solid transparent;
  border-bottom: $arrowWidth solid transparent;
  border-left: $arrowWidth solid $color;
}
@mixin popoverArrow-bottom($arrowWidth: 5px, $color: $black) {
  top: 0;
  left: 50%;
  margin-left: -$arrowWidth;
  border-left: $arrowWidth solid transparent;
  border-right: $arrowWidth solid transparent;
  border-bottom: $arrowWidth solid $color;
}
@mixin popoverArrow-right($arrowWidth: 5px, $color: $black) {
  top: 50%;
  left: 0;
  margin-top: -$arrowWidth;
  border-top: $arrowWidth solid transparent;
  border-bottom: $arrowWidth solid transparent;
  border-right: $arrowWidth solid $color;
}

// Grid System
// -----------

// Table columns
@mixin tableColumns($columnSpan: 1) {
  float: none; // undo default grid column styles
  width: (($gridColumnWidth) * $columnSpan) + ($gridGutterWidth * ($columnSpan - 1)) - 16; // 16 is total padding on left and right of table cells
  margin-left: 0; // undo default grid column styles
}

//******************************************************************
// * General mixins to be used in CWP
 //*
 //******************************************************************/


@mixin clearAfter{
  &:after{
    content: ".";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
  }
  *:first-child &{ zoom:1;}
}


//NOTE: To round all use border-radius instead!
@mixin roundTopCorners($r){
  @include roundedCorners($r, $r, 0, 0);
}
@mixin roundBottomCorners($r){
  @include roundedCorners(0, 0, $r, $r);
}
@mixin roundLeftCorners($r){
  @include roundedCorners($r, 0, 0, $r);
}
@mixin roundRightCorners($r){
  @include roundedCorners(0, $r, $r, 0);
}

//Mixin to create rounded corners. Takes a value for each of the 4 corners
@mixin roundedCorners($topLeft, $topRight, $bottomRight, $bottomLeft){
  -moz-border-radius-topleft: $topLeft;
  -moz-border-radius-topright: $topRight;
  -moz-border-radius-bottomright: $bottomRight;
  -moz-border-radius-bottomleft: $bottomLeft;
  -webkit-border-radius: $topLeft $topRight $bottomRight $bottomLeft;
  border-radius: $topLeft $topRight $bottomRight $bottomLeft;
}

//Inner shadow of 5px with transparency
@mixin inner-shadow{
  @include boxShadowInset(0, 0, 5px, 0, rgba(0,0,0,0.1));
}

@mixin noShadow{
  -webkit-box-shadow: none !important;
  -moz-box-shadow: none !important;
  box-shadow: none !important;
}

//Mixin to create an inset box shadow
@mixin boxShadowInset($horizontal, $vertical, $blur, $spread, $color){
  -webkit-box-shadow: inset $horizontal $vertical $blur $spread $color;
  -moz-box-shadow: inset $horizontal $vertical $blur $spread $color;
  box-shadow: inset $horizontal $vertical $blur $spread $color;
}

@mixin formValidation($textColor: #555, $borderColor: #ccc, $backgroundColor: #f5f5f5){
    color: $textColor;
    border-color: $borderColor;
    background-color: $backgroundColor;
    &:focus {
      border-color: darken($borderColor, 10%);
      @include box-shadow(0 0 6px lighten($borderColor, 20%));
      background-color: #fff;
    }
}

@mixin message($type){
  padding:5px;
  padding-left: 0;
  margin-right:5px;
  font-weight:normal;
  font-size:$font-size-base;
  line-height:$font-size-base +5px;
  display:block;
  clear:both;
  @include border-radius(3px);
  @if $type == 'error' {
    color: $errorText;
  }@else if $type == 'warning' {
    color: $warningText;
  }@else if $type == 'success' {
    color: $successText;
  }@else if $type == 'info' { 
    color: $infoText;
  }@else{
    color: $gray-dark;
  }
}


@mixin delay($time, $webkit:true){
  @if($webkit){
    -webkit-transition-delay: $time;
  }
  -moz-transition-delay: $time;
  -o-transition-delay: $time;
    
}

@mixin duration($time, $webkit:true){
  @if($webkit){
    -webkit-transition-duration: $time;
  } 
  -moz-transition-duration: $time;
  -o-transition-duration: $time;
  transition-duration: $time; 
}

//Rotation mixin for 45degrees, with IE support via matrix filter
@mixin rotate45{
  @include rotate(45deg);
  filter:progid:DXImageTransform.Microsoft.Matrix(/* IE6–IE9 actually 48degrees to deal with some intersting filter side effects*/
                       M11=0.6691306063588582, M12=-0.7431448254773941, M21=0.7431448254773941, M22=0.6691306063588582, sizingMethod='auto expand');
  zoom: 1;
  #IE9 &{
    filter:none;
  }
}

/* CSS3 Two Tone borders - IE9+ */
@mixin doubleBorder($side, $innerColor, $outerColor) {
  $shadow: "0 0 0";
  border-#{$side}: 1px solid $innerColor;
  @if ($side == "top") { $shadow: 0 -1px 0; }
  @if ($side == "right") { $shadow: 1px 0 0; }
  @if ($side == "bottom") { $shadow: 0 1px 0; }
  @if ($side == "left") { $shadow: -1px 0 0; }
  -webkit-box-shadow: $shadow $outerColor;
  -moz-box-shadow: $shadow $outerColor;
  -o-box-shadow: $shadow $outerColor;
  box-shadow: $shadow $outerColor;
}

// Aligns content as vertically centered
// Note: parent element must have a height

// SCSS:
// li{
//    @include verticalAlign(a, 35px);
// }
// HTML
// <li>
//  <a href="">To be vertically centered</a>
// </li>
@mixin verticalAlign($element: ".center", $height:100%){
  display: table;
  height:$height;
  #IE7 &{
    position: relative;
  }
  #{$element}{
    #IE7 &{
      position: absolute;
      top: 50%;
    }
    display: table-cell;
    vertical-align: middle;
    #IE7 & h2.verticalContent {
      width: 204px;
      text-align: center;
    }
    .verticalContent{
      #IE7 &{
        margin:0;
        padding:0;
        position: relative;
        top: -50%;
      }
    }
  }
}

// Links within links:
//  * Positions the inner link on top of the outerlink
//  * Place the outerLink in the html within a relatively positioned block,
//  * but above/outside the content of the div
//  * innerLink is any link you want to imbed inside the outerlink
//   eg. <div class="relativeElement">
//      <a href="" class="outerLink"></a>
//      <div class="content">
//        <a class="innerLink"></a>
//      </div>
//    </div>  ).

@mixin innerLink{
  position: relative;
  top:0;
  left:0;
  z-index:500;
  zoom:1; //IE hasLayout property
}

@mixin outerLink{
  position:absolute;
  top:0;
  left:0;
  width:100%;
  height:100%;
  z-index: 10;
  outline: none;
  #IE &{
    background-color:#ffffff;
    -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    opacity: 0;
  }
}

// A collection of animation mixins
// so far just has grow or fade (and the calls are commented out), but can be extended by:
// 1. adding a rule to keyframeSettings, and
// 2. calling the keyframes mixin below to generate the keyframes
//
// Note: keyframes will not work if called from inside selectors,
// so they are called from this mixin file. They are commented out by default.
// Uncomment to use these mixins
@mixin keyframeSettings($name){
  @if($name == "grow"){
    0% {
      right:-10px;
    }
    100% {
      right:0px;
    }
  }@else if($name == "fade"){
    0% {
      opacity:0;
    }
    100% {
      opacity:1;
    }
  }@else{
     0% {
      right:-10px;
    }
    100% {
      right:0px;
    }
  }
}

//Animation keyframes. Must be generated outside any selectors
@mixin keyframes($name){
  @-webkit-keyframes $name {
    @include keyframeSettings($name);
  }
  @-moz-keyframes $name {
    @include keyframeSettings($name);
  }
  @-ms-keyframes $name {
    @include keyframeSettings($name);
  }
  @-o-keyframes $name {
    @include keyframeSettings($name);
  }
  @keyframes $name {
    @include keyframeSettings($name);
  }
}

// This is the mixin you should call fromwithin your selector to apply animation effects
// $effect needs a corrosponding keyframe, such as grow or fade,
// with corrosponding keyframeSettings. Called below this mixin
// eg @include keyframes(grow);
@mixin animateEffect($effect) {
  -moz-animation-fill-mode: both;
  -ms-animation-fill-mode: both;
  -o-animation-fill-mode: both;
  -webkit-animation:$effect 0.2s linear both; //webkit supports this short-hand, moz doesn't yet
  -moz-animation:$effect 0.2s linear;
  -ms-animation:$effect 0.2s linear;
  -o-animation:$effect 0.2s linear;
  animation:$effect 0.2s linear both;
}

/// Comment these in to you use the keyframes
// @include keyframes(grow);
// @include keyframes(fade);


/* Fix for responsive images - use on IMG tag */
@mixin flexImage {
  max-width: 100%;
  /* just in case, to force correct aspect ratio */
  height: auto !important;
  /* IE7 support - use this to make sure the images survive the scale-down */
  -ms-interpolation-mode: bicubic;
}

/* Mobile icons for retina display */
@mixin at2x($image_name, $w: auto, $h: auto, $extention: '.png') {
  background-image: url("../images/mobile/" + $image_name + $extention);
  $x2img : $image_name + '@2x' + $extention;
  @media all and (-webkit-min-device-pixel-ratio : 1.5) {
    background-image: url("../images/mobile/" + $x2img);
    background-size: $w $h;
  }
}

/**
 * Mixin divides width of parent between children. It requires the parent to
 * have a size class representing the number of children (eg: class="size_3").
 * It will take this and divide the width by that number of elements.
 *
 * Note: In silverstripe templates you can use $Count on a set of items you
 * are about to loop throught to get the total number. EG:
 * <ul class="size_{$Menu.Count}">
 */
@mixin divide_width($from:1, $to:10, $old-browser: false){
  @for $i from $from through $to {
    &.size_#{$i} {
      li{
        width: 100% / $i;
         @if $old-browser{
          #IE8 &{
            width: floor(100% / $i);
          }
        }
      }
    }
  }
}


